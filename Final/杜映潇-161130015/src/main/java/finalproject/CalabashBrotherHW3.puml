@startuml
abstract class Creatures.Creature {
- Position position
- String name

+ Creatures.Creature(String name)
+ int getX()
+ int getY()
+ String getName()
+ void setX()
+ void setY()
+ String toString()
+ void to()
}
class Creatures.CalabashBrother {
- {static} final String[] names
- static final String[] colorArray
- int rank
- String color

+ Creatures.CalabashBrother(String rank)
+ int getRank()
+ String getColor()
}
Creatures.Creature <|-- Creatures.CalabashBrother: Extends


class Creatures.Grandfather {
- Grandfather()
+ {static} Grandfather getGrandfatherObject()
}
note bottom: Singleton
Creatures.Creature <|-- Creatures.Grandfather: Extends

class Creatures.Goblin {
+ Creatures.Goblin()
}
Creatures.Creature <|-- Creatures.Goblin: Extends

class Creatures.Scorpion {
- Creatures.Scorpion()
+ {static} Scorpion getScorpionObject()
}
note bottom: Singleton
Creatures.Creature <|-- Creatures.Scorpion: Extends

class Creatures.Snake {
- Creatures.Snake()
+ {static} Snake getSnakeObject()
}
note bottom: Singleton
Creatures.Creature <|-- Creatures.Snake: Extends

class WorldMap.Grid<T extends Creature> {
- T creature;

+ Grid(T creature)
+ T get()
}

abstract class WorldMap.World {
- Grid[][] worldMap;

+ WorldMap.World(Grid[][] worldMap)
+ int getSIZE()
+ Creature get(int x, int y)
+ <T extends Creature> void place(T creature, int x, int y)
+ void move(int fromX, int fromY, int toX, int toY)
+ String toString()
}

class WorldMap.CalabashWorld {
- {static} final int SIZE = 12;

+ CalabashWorld()
}

WorldMap.World *-- WorldMap.Grid: Composition
WorldMap.Grid <-- Creatures.Creature: Association
WorldMap.World <|-- WorldMap.CalabashWorld: Extends

class Controller.GameController {
- WorldMap.World world;

- void initialCalabashBrother()
- void initialScorpionAndGoblins()
- void initialGrandfatherAndSnake()
+ Controller.GameController(WorldMap.World world, Utils.Factory factory)
+ void initial()
+ void changeScorpionAndGoblinsFormation()
+ String getBattleField()
}

Controller.GameController o-- WorldMap.World: Aggregation

interface Utils.Factory{
+ <T> T generate(String input)
}

class Utils.CreatureFactory{
+ <T> T generate(String input)
}

Controller.GameController o-- Utils.CreatureFactory: Aggregation
Utils.Factory <|-- Utils.CreatureFactory: Implements

@enduml